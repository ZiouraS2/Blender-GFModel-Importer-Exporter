import os
import sys
import struct
from . import helperfunctions
from . import GFSection
from . import GFHashName
from . import GFTextureCoord
from . import GFHashName2
from . import RGBA
from . import PicaCommandReader


class GFMaterial(object):         

        
    def __init__(self,file):
        self.materialgfsection = GFSection.GFSection(file)
        self.materialname = GFHashName2.GFHashName2(file)
        self.shadername = GFHashName2.GFHashName2(file)
        self.vtxshadername = GFHashName2.GFHashName2(file)
        self.fragshadername = GFHashName2.GFHashName2(file)
        self.luthash0id = int.from_bytes(file.read(4),"little")
        self.luthash1id = int.from_bytes(file.read(4),"little")
        self.luthash2id = int.from_bytes(file.read(4),"little")
        helperfunctions.skippadding1(4,file)
        self.bumptexture = int.from_bytes(file.read(1),"little")
        self.constant0assignment = int.from_bytes(file.read(1),"little")
        self.constant1assignment = int.from_bytes(file.read(1),"little")
        self.constant2assignment = int.from_bytes(file.read(1),"little")
        self.constant3assignment = int.from_bytes(file.read(1),"little")
        self.constant4assignment = int.from_bytes(file.read(1),"little")
        self.constant5assignment = int.from_bytes(file.read(1),"little")
        helperfunctions.skippadding1(1,file)
        self.constant0color = RGBA.RGBA(file)
        self.constant1color = RGBA.RGBA(file)
        self.constant2color = RGBA.RGBA(file)
        self.constant3color = RGBA.RGBA(file)
        self.constant4color = RGBA.RGBA(file)
        self.constant5color = RGBA.RGBA(file)
        self.specular0color = RGBA.RGBA(file)
        self.specular1color = RGBA.RGBA(file)
        self.blendcolor = RGBA.RGBA(file)
        self.emissioncolor = RGBA.RGBA(file)
        self.ambientcolor = RGBA.RGBA(file)
        self.diffusecolor = RGBA.RGBA(file)
        self.edgetype = int.from_bytes(file.read(4),"little")
        self.idedgeenable = int.from_bytes(file.read(4),"little")
        self.edgeid = int.from_bytes(file.read(4),"little")
        self.projectiontype = int.from_bytes(file.read(4),"little")
        self.rimpower = struct.unpack('f',file.read(4))
        self.rimscale = struct.unpack('f',file.read(4))
        self.phongpower = struct.unpack('f',file.read(4))
        self.phongscale = struct.unpack('f',file.read(4))
        self.idedgeoffsetenable = int.from_bytes(file.read(4),"little")
        self.edgemapalphamask = int.from_bytes(file.read(4),"little",signed = True)
        self.baketexture0 = int.from_bytes(file.read(4),"little")
        self.baketexture1 = int.from_bytes(file.read(4),"little")
        self.baketexture2 = int.from_bytes(file.read(4),"little")
        self.bakeconstant0 = int.from_bytes(file.read(4),"little")
        self.bakeconstant1 = int.from_bytes(file.read(4),"little")
        self.bakeconstant2 = int.from_bytes(file.read(4),"little")
        self.bakeconstant3 = int.from_bytes(file.read(4),"little")
        self.bakeconstant4 = int.from_bytes(file.read(4),"little")
        self.bakeconstant5 = int.from_bytes(file.read(4),"little")
        self.vertexshadertype = int.from_bytes(file.read(4),"little")
        self.shaderparam0 = struct.unpack('f',file.read(4))
        self.shaderparam1 = struct.unpack('f',file.read(4))
        self.shaderparam2 = struct.unpack('f',file.read(4))
        self.shaderparam3 = struct.unpack('f',file.read(4))
        self.unitscount = int.from_bytes(file.read(4),"little")
        self.coords = []
        for x in range(self.unitscount):
            tempGFTexCoord = GFTextureCoord.GFTextureCoord(file)
            self.coords.append(tempGFTexCoord)
        helperfunctions.skippadding3(file)
        self.commandslength = int.from_bytes(file.read(4),"little")
        self.renderpriority = int.from_bytes(file.read(4),"little")
        self.materialhash = int.from_bytes(file.read(4),"little")
        self.renderlayer = int.from_bytes(file.read(4),"little")
        #not RGBA, copy paste of luthashids
        self.reflectionr = RGBA.RGBA(file)
        self.reflectiong = RGBA.RGBA(file)
        self.reflectionb = RGBA.RGBA(file)
        
        self.reflectionidk = int.from_bytes(file.read(4),"little")
        self.picacommands = []
        for x in range(self.commandslength >> 2):
            self.picacommands.append(int.from_bytes(file.read(4),"little"))
        self.texturesources = []
        commands = PicaCommandReader.PicaCommandReader(self.picacommands)
        if(hasattr(commands,'vtxuniforms')):
            self.texturesources.append(commands.vtxuniforms.uniforms[0][0])
            self.texturesources.append(commands.vtxuniforms.uniforms[0][1])
            self.texturesources.append(commands.vtxuniforms.uniforms[0][2])
            self.texturesources.append(commands.vtxuniforms.uniforms[0][3])
        helperfunctions.skippadding1(16,file)
    
    def writematerial(self, f):
    #   placeholder(will write gfsection here after we know the length of the material section (possec1start - possec1end))
        f.write(bytes(16))
        possec2start = f.tell()
        self.materialname.writeHashName(f)
        self.shadername.writeHashName(f)    
        self.vtxshadername.writeHashName(f)
        self.fragshadername.writeHashName(f)
        f.write(self.luthash0id.to_bytes(4, 'little'))
        f.write(self.luthash1id.to_bytes(4, 'little'))
        f.write(self.luthash2id.to_bytes(4, 'little'))
        helperfunctions.skippadding1(4,f)
        f.write(self.bumptexture.to_bytes(1, 'little', signed = True))
        f.write(self.constant0assignment.to_bytes(1, 'little'))
        f.write(self.constant1assignment.to_bytes(1, 'little'))
        f.write(self.constant2assignment.to_bytes(1, 'little'))
        f.write(self.constant3assignment.to_bytes(1, 'little'))
        f.write(self.constant4assignment.to_bytes(1, 'little'))
        f.write(self.constant5assignment.to_bytes(1, 'little'))
        helperfunctions.skippadding1(1,f)
        self.constant0color.writeRGBA(f)
        self.constant1color.writeRGBA(f)
        self.constant2color.writeRGBA(f)
        self.constant3color.writeRGBA(f)
        self.constant4color.writeRGBA(f)
        self.constant5color.writeRGBA(f)
        self.specular0color.writeRGBA(f)
        self.specular1color.writeRGBA(f)
        self.blendcolor.writeRGBA(f)
        self.emissioncolor.writeRGBA(f)
        self.ambientcolor.writeRGBA(f)
        self.diffusecolor.writeRGBA(f)
        f.write(self.edgetype.to_bytes(4, 'little', signed = True))
        f.write(self.idedgeenable.to_bytes(4, 'little', signed = True))
        f.write(self.edgeid.to_bytes(4, 'little'))
        f.write(self.projectiontype.to_bytes(4, 'little'))
        f.write(struct.pack('f',self.rimpower[0]))
        f.write(struct.pack('f',self.rimscale[0]))
        f.write(struct.pack('f',self.phongpower[0]))
        f.write(struct.pack('f',self.phongscale[0]))
        f.write(self.idedgeoffsetenable.to_bytes(4, 'little'))
        print(self.edgemapalphamask)
        f.write(self.edgemapalphamask.to_bytes(4, 'little',signed = True))
        f.write(self.baketexture0.to_bytes(4, 'little'))
        f.write(self.baketexture1.to_bytes(4, 'little'))
        f.write(self.baketexture2.to_bytes(4, 'little'))
        f.write(self.bakeconstant0.to_bytes(4, 'little'))
        f.write(self.bakeconstant1.to_bytes(4, 'little'))
        f.write(self.bakeconstant2.to_bytes(4, 'little'))
        f.write(self.bakeconstant3.to_bytes(4, 'little'))
        f.write(self.bakeconstant4.to_bytes(4, 'little'))
        f.write(self.bakeconstant5.to_bytes(4, 'little'))
        f.write(self.vertexshadertype.to_bytes(4, 'little'))
        f.write(struct.pack('f',self.shaderparam0[0]))
        f.write(struct.pack('f',self.shaderparam1[0]))
        f.write(struct.pack('f',self.shaderparam2[0]))
        f.write(struct.pack('f',self.shaderparam3[0]))
        f.write(self.unitscount.to_bytes(4, 'little'))
        
        for x in range(self.unitscount):
            self.coords[x].writeGFTextureCoord(f)
        helperfunctions.skippadding3ffver(f)
        f.write(self.commandslength.to_bytes(4, 'little'))
        f.write(self.renderpriority.to_bytes(4, 'little'))
        f.write(self.materialhash.to_bytes(4, 'little'))
        f.write(self.renderlayer.to_bytes(4, 'little'))
        self.reflectionr.writeRGBA(f)
        self.reflectiong.writeRGBA(f)
        self.reflectionb.writeRGBA(f)
        f.write(self.reflectionidk.to_bytes(4, 'little'))
        for x in range(self.commandslength >> 2):
            #print(self.picacommands[x])
            f.write(self.picacommands[x].to_bytes(4, 'little'))  
        helperfunctions.skippadding1(16,f)
        #where the gfsection ends
        possec2end = f.tell()
        f.seek(possec2start - 16)
        #write gfsection
        newGFSection =  GFSection.GFSection.__new__(GFSection.GFSection)
        newGFSection.__init2__("material",(possec2end - possec2start))
        newGFSection.writenewsection(f)
        f.seek(possec2end) 